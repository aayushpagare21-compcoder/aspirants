datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // Answers which user wrote.
  answers       Answer[]
  // Answers on which user clapped.
  claps         Claps[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])

  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Claps {
  id       String @id @default(cuid())
  answerId String @map("answer_id") // references to id in answers table
  userId   String @map("user_id") // refereces to id in users table
  // Answer which got clapped by a paricular user.
  answer   Answer @relation(references: [id], fields: [answerId])
  // Users who clapped on a particular answer.
  user     User   @relation(references: [id], fields: [userId])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // A user can clap once per answer.
  @@unique([userId, answerId])
  @@map("claps")
}

model Topics {
  id        String     @id @default(cuid())
  name      String     @unique // name of the topic e.g Socialogy
  // Questions on that topic.
  questions Question[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("topics")
}

enum Papers {
  GS1
  GS2
  GS3
  GS4
  ESSAY
  OPTIONAL
}

model Question {
  id        String    @id @default(cuid())
  text      String // question as plain text
  published Boolean   @default(false) // field to determine weather the question is published or not
  paper     Papers? // Which paper this question is asked. There might be a case the question is not yet asked in any paper.
  askedDate DateTime? @map("asked_date") // date of paper conducted when this question was asked in that paper. If not asked in any paper then date is the date published
  words     Int? // Answer to be written in words
  marks     Int? // Maximum marks for the answer
  hasEmbedding Boolean? @default(false) @map("has_embedding") // If the question has any image or video embedding
  topics    Topics[] // Topics related to that question
  answers   Answer[] // Answers written for the question

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("questions")
}

model Answer {
  id           String  @id @default(cuid())
  path         String?
  userId       String  @map("user_id") // references to id in the users table
  questionId   String?  @map("question_id") // references to id in the questions table

  // Question for which answer is written.
  question Question? @relation(fields: [questionId], references: [id])
  // User who wrote the answer.
  user     User     @relation(fields: [userId], references: [id])
  // Users who clapped on answer
  claps    Claps[]
  // Evaluations for the answer
  evaluations EvaluationResult[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("answers")
} 

model EvaluationResult { 
  id        String     @id @default(cuid())
  evaluationJSON Json?  @map("evaluation_json") 
  answerId String? @map("answer_id")
  answer Answer? @relation(fields: [answerId], references: [id]) 
}

