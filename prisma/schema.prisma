datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // Answers which user wrote.
  answers       Answer[]
  // Answers on which user clapped.
  claps         Claps[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Claps {
  id       String @id @default(cuid())
  answerId String @map("answer_id")
  userId   String @map("user_id")
  // Answer which got clapped by a paricular user.
  answer   Answer @relation(references: [id], fields: [answerId])
  // Users who clapped on a particular answer.
  user     User   @relation(references: [id], fields: [userId])

  // A user can clap once per answer.
  @@unique([userId, answerId])
  @@map("claps")
}

model Topics {
  id      String   @id @default(cuid())
  name    String   @unique
  // Answers of that topic - for example answer written on topic Socialogy.
  answers Answer[]

  @@map("topics")
}

enum Papers {
  GS1
  GS2
  GS3
  GS4
  ESSAY
  OPTIONAL
}

model Answer {
  id             String    @id @default(cuid())
  question       String
  answer         String
  markdownAnswer String    @map("markdown_answer")
  userId         String    @map("user_id")
  published      Boolean   @default(false)
  paper          Papers?
  paperDate      DateTime? @map("paper_date")
  words          Int?
  marks          Int?

  // User who wrote the answer.
  user   User     @relation(fields: [userId], references: [id])
  // Topics related to that answer such as Socialogy, Sciene and Tech etc.
  topics Topics[]
  // Users who clapped on answer
  claps  Claps[]

  @@map("answers")
}
